{"version":3,"file":"static/js/423.e652a6e1.chunk.js","mappings":"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","sources":["webpack://reackman-s-network/./src/common/components/button/button.module.scss?f662","common/components/button/index.tsx","features/users/model/users.selectors.ts","webpack://reackman-s-network/./src/features/users/ui/users-list/users-list.module.scss?3f2f","webpack://reackman-s-network/./src/common/components/paginator/paginator.module.scss?beaa","common/components/paginator/index.tsx","webpack://reackman-s-network/./src/features/users/ui/user/user.module.scss?e076","features/users/ui/user/index.tsx","webpack://reackman-s-network/./src/features/users/ui/users-search-form/users-search-form.module.scss?9fca","features/users/ui/users-search-form/index.tsx","features/users/ui/users-list/index.tsx","features/users/ui/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_button__yx2c5\"};","import { ComponentPropsWithoutRef } from 'react'\r\nimport styles from 'common/components/button/button.module.scss'\r\n\r\ntype ButtonPropsType = ComponentPropsWithoutRef<'button'> & {\r\n    title: string\r\n    callback?: () => void\r\n}\r\n\r\nexport const Button = ({ title, callback, ...rest }: ButtonPropsType) => {\r\n    return (\r\n        <button className={styles.button} onClick={callback} {...rest}>\r\n            {title}\r\n        </button>\r\n    )\r\n}\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { AppStateType } from 'app/model/store'\r\nimport { FilterType, UserType } from 'features/users/api/users.api.types'\r\n\r\n// selectors\r\nconst getUsersSelector = (state: AppStateType) => state.users.users\r\nconst getPageSizeSelector = (state: AppStateType) => state.users.pageSize\r\nconst getTotalUsersCountSelector = (state: AppStateType) => state.users.totalUsersCount\r\nconst getCurrentPageSelector = (state: AppStateType) => state.users.currentPage\r\nconst getUsersFilterSelector = (state: AppStateType) => state.users.filter\r\nconst getIsFollowingInProgressSelector = (state: AppStateType) => state.users.isFollowingInProgress\r\nexport const getIsFetchingSelector = (state: AppStateType) => state.users.isFetching\r\n\r\n// selectors with reselect\r\nexport const getUsers = createSelector(getUsersSelector, (users: UserType[]) => users)\r\nexport const getPageSize = createSelector(getPageSizeSelector, (pageSize: number) => pageSize)\r\nexport const getUsersFilter = createSelector(getUsersFilterSelector, (filter: FilterType) => filter)\r\nexport const getTotalUsersCount = createSelector(\r\n    getTotalUsersCountSelector,\r\n    (totalUsersCount: number) => totalUsersCount,\r\n)\r\nexport const getCurrentPage = createSelector(\r\n    getCurrentPageSelector,\r\n    (currentPage: number) => currentPage,\r\n)\r\nexport const getIsFollowingInProgress = createSelector(\r\n    getIsFollowingInProgressSelector,\r\n    (isFollowingInProgress: number[]) => isFollowingInProgress,\r\n)\r\nexport const getIsFetching = createSelector(\r\n    getIsFetchingSelector,\r\n    (isFetching: boolean) => isFetching,\r\n)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"usersContainer\":\"users-list_usersContainer__-4Etl\",\"users\":\"users-list_users__1rd6C\"};","// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"paginator_paginator__eaHG6\",\"page\":\"paginator_page__jSwyJ\",\"selectedPage\":\"paginator_selectedPage__Ge7Yn\"};","import { Component } from 'react'\r\n\r\nimport styles from 'common/components/paginator/paginator.module.scss'\r\nimport { Button } from 'common/components/button'\r\n\r\ntype Props = {\r\n    pageSize: number\r\n    totalItemsCount: number\r\n    currentPageNumber: number\r\n    portionSize?: number\r\n    onChangePageNumber: (page: number) => void\r\n}\r\n\r\ntype State = {\r\n    portionNumber: number\r\n}\r\n\r\nexport class Paginator extends Component<Props, State> {\r\n    state = {\r\n        portionNumber: Math.ceil(this.props.currentPageNumber / (this.props?.portionSize || 10)),\r\n    }\r\n\r\n    onPageClick = (page: number) => {\r\n        const { onChangePageNumber } = this.props\r\n        onChangePageNumber(page)\r\n    }\r\n\r\n    onPrevClick = () => {\r\n        this.setState({\r\n            portionNumber: this.state.portionNumber - 1,\r\n        })\r\n    }\r\n\r\n    onNextClick = () => {\r\n        this.setState({\r\n            portionNumber: this.state.portionNumber + 1,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { pageSize, totalItemsCount, currentPageNumber, portionSize = 10 } = this.props\r\n\r\n        const pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n        const pagesArray = Array.from({ length: pagesCount }, (_, i) => i + 1)\r\n        const portionCount = Math.ceil(pagesCount / portionSize)\r\n        const leftPortionPageNumber = (this.state.portionNumber - 1) * portionSize + 1\r\n        const rightPortionPageNumber = this.state.portionNumber * portionSize\r\n\r\n        const pages = pagesArray\r\n            .filter(page => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n            .map(page => (\r\n                <span\r\n                    key={page}\r\n                    className={`${styles.page} ${\r\n                        currentPageNumber === page ? styles.selectedPage : ''\r\n                    }`}\r\n                    onClick={() => this.onPageClick(page)}\r\n                >\r\n                    {page}\r\n                </span>\r\n            ))\r\n\r\n        const showPrevButton = this.state.portionNumber > 1\r\n        const showNextButton = this.state.portionNumber < portionCount\r\n\r\n        return (\r\n            <div className={styles.paginator}>\r\n                {showPrevButton && <Button title=\"prev\" onClick={this.onPrevClick} />}\r\n                {pages}\r\n                {showNextButton && <Button title=\"next\" onClick={this.onNextClick} />}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"user\":\"user_user__3wZG2\",\"subsBlock\":\"user_subsBlock__vq3o2\",\"userImg\":\"user_userImg__P1Pqo\",\"info\":\"user_info__kRCQi\",\"username\":\"user_username__VfjuR\",\"status\":\"user_status__BiJKR\"};","import { memo } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nimport styles from 'features/users/ui/user/user.module.scss'\r\nimport userDefault from 'common/img/user.jpg'\r\nimport { UserType } from 'features/users/api/users.api.types'\r\nimport { followUser, unfollowUser } from 'features/users/model/users.reducer'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getIsFollowingInProgress } from 'features/users/model/users.selectors'\r\nimport { Button } from '../../../../common/components/button'\r\n\r\ntype Props = {\r\n    user: UserType\r\n}\r\n\r\nexport const User = memo(({ user }: Props) => {\r\n    const isFollowingInProgress = useSelector(getIsFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onFollowUser = (userId: number) => {\r\n        dispatch(followUser(userId))\r\n    }\r\n    const onUnfollowUser = (userId: number) => {\r\n        dispatch(unfollowUser(userId))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.user}>\r\n            <div className={styles.subsBlock}>\r\n                <NavLink to={`/profile/${user.id}`}>\r\n                    <img\r\n                        className={styles.userImg}\r\n                        src={user.photos.large ? user.photos.large : userDefault}\r\n                        alt={user.name}\r\n                        width={50}\r\n                        height={50}\r\n                    />\r\n                </NavLink>\r\n                {user.followed ? (\r\n                    <Button title='Unfollow'\r\n                        disabled={isFollowingInProgress.some(id => user.id === id)}\r\n                        onClick={() => onUnfollowUser(user.id)}\r\n                    />\r\n                ) : (\r\n                    <Button title='Follow'\r\n                        disabled={isFollowingInProgress.some(id => user.id === id)}\r\n                        onClick={() => onFollowUser(user.id)}\r\n                    />\r\n                )}\r\n            </div>\r\n            <div className={styles.info}>\r\n                <h3 className={styles.username}>{user.name}</h3>\r\n                <p className={styles.status}>{user.status}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"users-search-form_form__QmYMd\",\"input\":\"users-search-form_input__PGgo6\"};","import { useSelector } from 'react-redux'\r\nimport { Formik, Form, Field, FormikHelpers, useFormik } from 'formik'\r\n\r\nimport { FilterType } from 'features/users/api/users.api.types'\r\nimport { getUsersFilter } from 'features/users/model/users.selectors'\r\nimport styles from './users-search-form.module.scss'\r\nimport { Button } from 'common/components/button'\r\nimport { FormControl, FormControlLabel, InputLabel, MenuItem, Select, TextField } from '@mui/material'\r\n\r\ntype Props = {\r\n    onChangeUsersFilter: (filter: FilterType) => void\r\n}\r\n\r\n\r\nexport const UsersSearchForm = ({ onChangeUsersFilter }: Props) => {\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const submit = (values: FormType, { setSubmitting }: FormikHelpers<FormType>) => {\r\n        const filter: FilterType = {\r\n            name: values.name,\r\n            friend: values.friend === 'null' ? null : values.friend !== 'false'\r\n        }\r\n        onChangeUsersFilter(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: '',\r\n            friend: 'null'\r\n        },\r\n        onSubmit: (values: FormType, { setSubmitting }: FormikHelpers<FormType>) => {\r\n            const filter: FilterType = {\r\n                name: values.name,\r\n                friend: values.friend === 'null' ? null : values.friend !== 'false'\r\n            }\r\n            onChangeUsersFilter(filter)\r\n            setSubmitting(false)\r\n        }\r\n    })\r\n\r\n    const customTextField = ({\r\n                                 field,\r\n                                 ...props\r\n                             }: any) => {\r\n        return (\r\n            <>\r\n                <TextField\r\n                    label={field.name.charAt(0).toUpperCase() + field.name.slice(1)}\r\n                    {...field}\r\n                    sx={{\r\n                        '& label': {\r\n                            color: 'white'\r\n                        },\r\n                        '& label.Mui-focused': {\r\n                            color: 'var(--color-primary)'\r\n                        },\r\n                        '& .MuiInput-underline:after': {\r\n                            borderBottomColor: 'var(--color-primary)'\r\n                        },\r\n                        '& .MuiOutlinedInput-root': {\r\n                            '& fieldset': {\r\n                                borderColor: 'white'\r\n                            },\r\n                            '&:hover fieldset': {\r\n                                borderColor: 'var(--color-primary)'\r\n                            },\r\n                            '&.Mui-focused fieldset': {\r\n                                borderColor: 'var(--color-primary)'\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n    const customSelect = ({\r\n                              field,\r\n                              ...props\r\n                          }: any) => {\r\n        return (\r\n            <>\r\n                <FormControl>\r\n                    <InputLabel sx={{\r\n                        color: 'white',\r\n                        '&.Mui-focused': {\r\n                            color: 'white'\r\n                        }\r\n                    }}\r\n                    >\r\n                        Users\r\n                    </InputLabel>\r\n                    <Select\r\n                        label=\"Users\"\r\n                        defaultValue=\"true\"\r\n                        {...field}\r\n                        sx={{\r\n                            color: 'white',\r\n                            '.MuiOutlinedInput-notchedOutline': {\r\n                                borderColor: 'white'\r\n                            },\r\n                            '&.Mui-focused .MuiOutlinedInput-notchedOutline': {\r\n                                borderColor: 'var(--color-primary)'\r\n                            },\r\n                            '&:hover .MuiOutlinedInput-notchedOutline': {\r\n                                borderColor: 'var(--color-primary)'\r\n                            },\r\n                            '.MuiSvgIcon-root ': {\r\n                                fill: 'white !important'\r\n                            }\r\n                        }}\r\n\r\n                    >\r\n                        <MenuItem value=\"null\">All</MenuItem>\r\n                        <MenuItem value=\"true\">Only followed</MenuItem>\r\n                        <MenuItem value=\"false\">Only unfollowed</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                name: filter.name as string,\r\n                friend: String(filter.friend) as FriendFormType\r\n            }}\r\n            onSubmit={submit}\r\n        >\r\n            {({ isSubmitting }) => (\r\n                <Form className={styles.form}>\r\n                    <Field type=\"text\"\r\n                           name=\"name\"\r\n                           component={customTextField}\r\n                           className={styles.input}\r\n                    />\r\n                    <Field name=\"friend\"\r\n                           component={customSelect}\r\n                           className={styles.input}\r\n                    />\r\n                    <Button type=\"submit\" title=\"Submit\" disabled={isSubmitting} />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\ntype FormType = {\r\n    name: string\r\n    friend: FriendFormType\r\n}\r\n","import { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport styles from 'features/users/ui/users-list/users-list.module.scss'\r\nimport { Paginator } from 'common/components/paginator'\r\nimport { User } from 'features/users/ui/user'\r\nimport { UsersSearchForm } from 'features/users/ui/users-search-form'\r\nimport {\r\n    getCurrentPage,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter,\r\n} from 'features/users/model/users.selectors'\r\nimport { requestUsers, setCurrentPage } from 'features/users/model/users.reducer'\r\nimport { FilterType } from 'features/users/api/users.api.types'\r\n\r\nexport const UsersList = () => {\r\n    const users = useSelector(getUsers)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangePageNumber = (pageNumber: number) => {\r\n        dispatch(setCurrentPage(pageNumber))\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onChangeUsersFilter = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n\r\n    const usersItems: JSX.Element[] = users.map(user => <User key={user.id} user={user} />)\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.users}>\r\n                <UsersSearchForm onChangeUsersFilter={onChangeUsersFilter} />\r\n                {usersItems}\r\n                <Paginator\r\n                    pageSize={pageSize}\r\n                    totalItemsCount={totalUsersCount}\r\n                    currentPageNumber={currentPage}\r\n                    onChangePageNumber={onChangePageNumber}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport styles from 'features/users/ui/users-list/users-list.module.scss'\r\nimport { UsersList } from 'features/users/ui/users-list'\r\nimport { Preloader } from 'common/components/preloader'\r\nimport {\r\n    getCurrentPage,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getUsersFilter,\r\n} from 'features/users/model/users.selectors'\r\nimport { requestUsers } from 'features/users/model/users.reducer'\r\n\r\nconst Users = () => {\r\n    const isFetching = useSelector(getIsFetching)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        if (!Object.keys(filter).length) return\r\n\r\n        const query = {\r\n            ...(filter.name && { term: filter.name }),\r\n            ...(filter.friend !== null && { friend: String(filter.friend) }),\r\n            ...(currentPage !== 1 && { page: String(currentPage) }),\r\n        }\r\n\r\n        const searchQuery = new URLSearchParams(query).toString()\r\n        const currentSearch = history.location.search\r\n\r\n        if (currentSearch !== searchQuery) {\r\n            history.push({\r\n                pathname: '/users',\r\n                search: searchQuery,\r\n            })\r\n        }\r\n    }, [filter, history, currentPage])\r\n\r\n    useEffect(() => {\r\n        const currentSearch = new URLSearchParams(history.location.search)\r\n        const parsed = Object.fromEntries(currentSearch.entries()) as QueryParamsType\r\n\r\n        const { page: parsedPage, term: parsedTerm, friend: parsedFriend } = parsed\r\n\r\n        const actualPage = parsedPage ? Number(parsedPage) : currentPage\r\n        const actualFilter = {\r\n            ...filter,\r\n            term: parsedTerm && parsedTerm !== 'undefined' ? parsedTerm : '',\r\n            friend: parsedFriend ? parsedFriend === 'true' : null,\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    return <div className={styles.usersContainer}>{isFetching ? <Preloader /> : <UsersList />}</div>\r\n}\r\n\r\nexport default Users\r\n\r\n// types\r\ntype QueryParamsType = {\r\n    page: string\r\n    term: string\r\n    friend: string\r\n}\r\n"],"names":["Button","title","callback","rest","className","styles","onClick","getUsers","createSelector","state","users","getPageSize","pageSize","getUsersFilter","filter","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFollowingInProgress","isFollowingInProgress","getIsFetching","isFetching","Paginator","portionNumber","Math","ceil","props","currentPageNumber","portionSize","onPageClick","page","onChangePageNumber","onPrevClick","setState","onNextClick","this","totalItemsCount","pagesCount","pagesArray","Array","from","length","_","i","portionCount","leftPortionPageNumber","rightPortionPageNumber","pages","map","showPrevButton","showNextButton","Component","User","memo","user","useSelector","dispatch","useDispatch","to","id","src","photos","large","userDefault","alt","name","width","height","followed","disabled","some","userId","unfollowUser","followUser","status","UsersSearchForm","onChangeUsersFilter","customTextField","useFormik","initialValues","friend","onSubmit","values","setSubmitting","field","TextField","label","charAt","toUpperCase","slice","sx","color","borderBottomColor","borderColor","customSelect","FormControl","InputLabel","Select","defaultValue","fill","MenuItem","value","String","isSubmitting","type","component","UsersList","usersItems","requestUsers","pageNumber","setCurrentPage","history","useHistory","useEffect","Object","keys","query","term","searchQuery","URLSearchParams","toString","location","search","push","pathname","currentSearch","parsed","fromEntries","entries","parsedPage","parsedTerm","parsedFriend","actualPage","Number","actualFilter"],"sourceRoot":""}