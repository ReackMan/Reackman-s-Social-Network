{"version":3,"file":"static/js/657.04351ddf.chunk.js","mappings":"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","sources":["webpack://reackman-s-network/./src/common/components/button/button.module.scss?f662","common/components/button/index.tsx","webpack://reackman-s-network/./src/common/components/form-control/form-control.module.scss?ad75","common/components/form-control/index.tsx","features/profile/model/profile.selectors.ts","webpack://reackman-s-network/./src/features/profile/ui/profile-header/profile-header.module.scss?e8f5","webpack://reackman-s-network/./src/features/profile/ui/profile-header/avatar/avatar.module.scss?7cbd","features/profile/ui/profile-header/avatar/index.tsx","webpack://reackman-s-network/./src/features/profile/ui/profile-header/profile-status/profile-status.module.scss?7cdf","features/profile/ui/profile-header/profile-status/index.tsx","features/profile/ui/profile-header/index.tsx","webpack://reackman-s-network/./src/features/profile/ui/profile-info/profile-info.module.scss?6bce","features/profile/ui/profile-info/contact/index.tsx","webpack://reackman-s-network/./src/features/profile/ui/profile-info/profile-data/profile-data.module.scss?7da8","features/profile/ui/profile-info/profile-data/index.tsx","webpack://reackman-s-network/./src/features/profile/ui/profile-info/profile-data-form/profile-data-form.module.scss?eb77","features/profile/ui/profile-info/profile-data-form/index.tsx","features/profile/ui/profile-info/index.tsx","webpack://reackman-s-network/./src/features/profile/ui/profile.module.scss?99ce","webpack://reackman-s-network/./src/features/profile/ui/friends/friends.module.scss?ff7c","webpack://reackman-s-network/./src/features/profile/ui/friends/friend/friend.module.scss?10a9","features/profile/ui/friends/friend/index.tsx","features/profile/ui/friends/index.tsx","features/profile/ui/index.tsx","features/profile/ui/profile-container.tsx","features/users/model/users.selectors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_button__yx2c5\"};","import { ComponentPropsWithoutRef } from 'react'\r\nimport styles from 'common/components/button/button.module.scss'\r\n\r\ntype ButtonPropsType = ComponentPropsWithoutRef<'button'> & {\r\n    title: string\r\n    callback?: () => void\r\n}\r\n\r\nexport const Button = ({ title, callback, ...rest }: ButtonPropsType) => {\r\n    return (\r\n        <button className={styles.button} onClick={callback} {...rest}>\r\n            {title}\r\n        </button>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"form-control_formControl__8nMZC\",\"error\":\"form-control_error__TdxE3\"};","import { cloneElement, FC, ReactElement, ReactNode } from 'react'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\n\r\nimport styles from 'common/components/form-control/form-control.module.scss'\r\nimport { FieldValidatorType } from 'common/utils/validators/validators'\r\n\r\ntype Props = WrappedFieldProps & {\r\n    children: ReactNode\r\n}\r\n\r\nconst FormControl = ({ input, meta: { touched, error }, children, ...props }: Props) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n            {cloneElement(children as ReactElement<ReactNode>, { ...input, ...props })}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const CustomTextarea = (props: Props) => (\r\n    <FormControl {...props}>\r\n        <textarea />\r\n    </FormControl>\r\n)\r\n\r\nexport const CustomInput = (props: Props) => (\r\n    <FormControl {...props}>\r\n        <input />\r\n    </FormControl>\r\n)\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    name: FormKeyType,\r\n    validators: FieldValidatorType[],\r\n    component: FC<Props>,\r\n    props = {},\r\n) {\r\n    return <Field name={name} validate={validators} component={component} {...props} />\r\n}\r\n\r\n// types\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { AppStateType } from 'app/model/store'\r\nimport { ProfileType } from 'features/profile/api/profile.api.types'\r\n\r\n// selectors\r\nconst getProfileSelector = (state: AppStateType) => state.profile.profileData\r\nconst getStatusSelector = (state: AppStateType) => state.profile.status\r\nconst getUserIdSelector = (state: AppStateType) => state.profile.profileData.userId\r\nconst getProfileAvatarSelector = (state: AppStateType) => state.profile.profileData.photos\r\n\r\n// selectors with reselect\r\nexport const getProfile = createSelector(getProfileSelector, (profile: ProfileType) => profile)\r\nexport const getProfileAvatar = createSelector(getProfileAvatarSelector,\r\n    (photos: {large: string, small: string }) => photos)\r\nexport const getStatus = createSelector(getStatusSelector, (status: string) => status)\r\nexport const getUserId = createSelector(getUserIdSelector, (userId: number) => userId)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"profile-header_header__NM152\",\"cover\":\"profile-header_cover__t86dA\",\"content\":\"profile-header_content__TCbf1\",\"username\":\"profile-header_username__N9H5W\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"avatar_avatar__ucJPk\",\"userImg\":\"avatar_userImg__Qp862\",\"uploadImgLabel\":\"avatar_uploadImgLabel__6TiFQ\",\"uploadImgInput\":\"avatar_uploadImgInput__Ur0YK\",\"uploadImgIcon\":\"avatar_uploadImgIcon__gl8Tv\"};","import { ChangeEvent } from 'react'\r\nimport { MdOutlinePhotoCamera } from 'react-icons/md'\r\n\r\nimport styles from 'features/profile/ui/profile-header/avatar/avatar.module.scss'\r\nimport userDefault from 'common/img/user.jpg'\r\nimport { PhotosType } from 'features/users/api/users.api.types'\r\n\r\ntype Props = {\r\n    photos: PhotosType\r\n    isOwner: boolean\r\n    callback: (file: File) => void\r\n}\r\n\r\nexport const Avatar = ({ photos, isOwner, callback }: Props) => {\r\n    const onUploadImage = (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.target?.files?.length && callback(e.target.files[0])\r\n    }\r\n\r\n    return (\r\n        <div className={styles.avatar}>\r\n            <img className={styles.userImg} src={photos?.large || userDefault} alt=\"user\" />\r\n            {isOwner && (\r\n                <label className={styles.uploadImgLabel}>\r\n                    <input\r\n                        className={styles.uploadImgInput}\r\n                        type=\"file\"\r\n                        accept=\".jpg, .jpeg, .png\"\r\n                        onChange={onUploadImage}\r\n                    />\r\n                    <MdOutlinePhotoCamera className={styles.uploadImgIcon} />\r\n                </label>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileStatus\":\"profile-status_profileStatus__48hta\"};","import { ChangeEvent, Component } from 'react'\r\n\r\nimport styles from 'features/profile/ui/profile-header/profile-status/profile-status.module.scss'\r\n\r\ntype Props = {\r\n    editable: boolean\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\ntype State = {\r\n    editMode: boolean\r\n    status: string\r\n}\r\n\r\nexport class ProfileStatus extends Component<Props, State> {\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status,\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props) {\r\n        const { status } = this.props\r\n        if (prevProps.status !== status) this.setState({ status })\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        if (!this.props.editable) return\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n\r\n    deactivateEditMode = () => {\r\n        const { updateUserStatus } = this.props\r\n        this.setState({\r\n            editMode: false,\r\n        })\r\n        updateUserStatus(this.state.status)\r\n    }\r\n\r\n    onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { status } = this.props\r\n\r\n        return (\r\n            <div className={styles.profileStatus}>\r\n                {this.state.editMode ? (\r\n                    <input\r\n                        onChange={this.onChangeStatus}\r\n                        onBlur={this.deactivateEditMode}\r\n                        value={this.state.status}\r\n                        autoFocus\r\n                    />\r\n                ) : (\r\n                    <span onDoubleClick={this.activateEditMode}>{status || 'Add status'}</span>\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { Component } from 'react'\r\n\r\nimport styles from 'features/profile/ui/profile-header/profile-header.module.scss'\r\nimport background from 'common/img/fon1.jpg'\r\nimport { ProfileType } from 'features/profile/api/profile.api.types'\r\nimport { Avatar } from 'features/profile/ui/profile-header/avatar'\r\nimport { ProfileStatus } from 'features/profile/ui/profile-header/profile-status'\r\n\r\ntype Props = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    sendPhoto: (file: File) => void\r\n}\r\n\r\ntype State = {\r\n    editMode: boolean\r\n}\r\n\r\nexport class ProfileHeader extends Component<Props, State> {\r\n    state = {\r\n        editMode: false,\r\n    }\r\n\r\n    onEditProfile = () => {\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { isOwner, profile, status, updateUserStatus, sendPhoto } = this.props\r\n\r\n        return (\r\n            <div className={styles.header}>\r\n                <div\r\n                    className={styles.cover}\r\n                    style={{ backgroundImage: `url(${background})` }}\r\n                ></div>\r\n                <div className={styles.content}>\r\n                    <Avatar photos={profile.photos} isOwner={isOwner} callback={sendPhoto} />\r\n                    <span className={styles.username}>{profile.fullName}</span>\r\n                    <ProfileStatus\r\n                        editable={isOwner}\r\n                        status={status}\r\n                        updateUserStatus={updateUserStatus}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"profile-info_profileInfo__-0Lkn\",\"content\":\"profile-info_content__ue8OE\"};","type Props = {\r\n    title: string\r\n    value: string\r\n}\r\n\r\nexport const Contact = ({ title, value }: Props) => {\r\n    return (\r\n        <div style={{ marginBottom: '0.4rem' }}>\r\n            <p>\r\n                {title}: <b>{value}</b>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profileData\":\"profile-data_profileData__EwqkV\",\"item\":\"profile-data_item__WFy9M\",\"inner\":\"profile-data_inner__10Bmy\",\"editButton\":\"profile-data_editButton__nyqWF\"};","import { RiEditFill } from 'react-icons/ri'\r\nimport { MdOutlineScreenSearchDesktop } from 'react-icons/md'\r\nimport { GiSkills } from 'react-icons/gi'\r\nimport { IoIosContacts } from 'react-icons/io'\r\nimport { AiOutlineInfoCircle } from 'react-icons/ai'\r\n\r\nimport { Contact } from 'features/profile/ui/profile-info/contact'\r\nimport styles from 'features/profile/ui/profile-info/profile-data/profile-data.module.scss'\r\nimport { ProfileType } from 'features/profile/api/profile.api.types'\r\n\r\ntype Props = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    callback: () => void\r\n}\r\n\r\nexport const ProfileData = ({ profile, isOwner, callback }: Props) => {\r\n    const contacts = Object.entries(profile.contacts)\r\n        .filter(([_, value]) => value)\r\n        .map(([title, value]) => {\r\n            return <Contact key={title} title={title} value={value} />\r\n        })\r\n\r\n    return (\r\n        <div className={styles.profileData}>\r\n            <div className={styles.inner}>\r\n                <h3>Profile</h3>\r\n                {isOwner && (\r\n                    <button className={styles.editButton} onClick={callback}>\r\n                        <RiEditFill />\r\n                    </button>\r\n                )}\r\n            </div>\r\n            <span className={styles.item}>\r\n                <MdOutlineScreenSearchDesktop /> Looking for a job:{' '}\r\n                <b>{profile.lookingForAJob ? ' Yes 🐱‍💻' : ' No 😎'}</b>\r\n            </span>\r\n            {profile.lookingForAJob && (\r\n                <span className={styles.item}>\r\n                    <GiSkills /> Skills: <b>{profile.lookingForAJobDescription}</b>\r\n                </span>\r\n            )}\r\n            <div>\r\n                {profile.aboutMe && (\r\n                    <span className={styles.item}>\r\n                        <AiOutlineInfoCircle />\r\n                        About me: <b>{profile.aboutMe}</b>\r\n                    </span>\r\n                )}\r\n            </div>\r\n            {contacts.length > 0 && (\r\n                <div className={styles.contacts}>\r\n                    <span className={styles.item}>\r\n                        <IoIosContacts /> Contacts:\r\n                    </span>{' '}\r\n                    {contacts}\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"profile-data-form_form__cQnJa\",\"item\":\"profile-data-form_item__JK4fO\",\"heading\":\"profile-data-form_heading__2lNAD\",\"input\":\"profile-data-form_input__fdbZ8\",\"textarea\":\"profile-data-form_textarea__z6IUY\",\"job\":\"profile-data-form_job__tiUwc\",\"error\":\"profile-data-form_error__1XzGo\"};","import { InjectedFormProps, reduxForm } from 'redux-form'\r\n\r\nimport styles from 'features/profile/ui/profile-info/profile-data-form/profile-data-form.module.scss'\r\nimport { ContactsType, ProfileType } from 'features/profile/api/profile.api.types'\r\nimport { Contact } from 'features/profile/ui/profile-info/contact'\r\nimport {\r\n    createField,\r\n    CustomInput,\r\n    CustomTextarea,\r\n    GetStringKeys,\r\n} from 'common/components/form-control'\r\nimport { Button } from 'common/components/button'\r\n\r\nconst ProfileDataForm = ({ initialValues, handleSubmit, error }: ProfileDataFormDomainType) => {\r\n    const contacts = Object.entries(initialValues.contacts).map(([title, value]) => {\r\n        return (\r\n            <div key={title}>\r\n                <Contact title={title} value=\"\" />\r\n                {createField(`contacts.${title}`, [], CustomInput, {\r\n                    placeholder: title,\r\n                    className: styles.input,\r\n                })}\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <form className={styles.form} onSubmit={handleSubmit}>\r\n            <div className={styles.item}>\r\n                <h4 className={styles.heading}>Full Name:</h4>\r\n                {createField<ProfileDataFormValuesTypeKeys>('fullName', [], CustomInput, {\r\n                    className: styles.input,\r\n                })}\r\n            </div>\r\n            <div className={`${styles.item} ${styles.job}`}>\r\n                <h4 className={styles.heading}>Looking for a job:</h4>\r\n                {createField<ProfileDataFormValuesTypeKeys>('lookingForAJob', [], CustomInput, {\r\n                    type: 'checkbox',\r\n                })}\r\n            </div>\r\n            <div className={styles.item}>\r\n                <h4 className={styles.heading}>My skills:</h4>\r\n                {createField<ProfileDataFormValuesTypeKeys>(\r\n                    'lookingForAJobDescription',\r\n                    [],\r\n                    CustomTextarea,\r\n                    {\r\n                        placeholder: 'My professional skills',\r\n                        rows: 1,\r\n                        className: styles.textarea,\r\n                    },\r\n                )}\r\n            </div>\r\n            <div className={styles.item}>\r\n                <h4 className={styles.heading}>About me:</h4>\r\n                {createField<ProfileDataFormValuesTypeKeys>('aboutMe', [], CustomTextarea, {\r\n                    placeholder: 'About me',\r\n                    rows: 1,\r\n                    className: styles.textarea,\r\n                })}\r\n            </div>\r\n            {contacts.length > 0 && (\r\n                <div className={styles.item}>\r\n                    <h4 className={styles.heading}>Contacts:</h4> {contacts}{' '}\r\n                </div>\r\n            )}\r\n            <Button title=\"Save\" />\r\n            {error && <div className={styles.error}>{error}</div>}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ProfileDataFormType, ProfileDataFormPropsType>({\r\n    form: 'edit-profile',\r\n})(ProfileDataForm)\r\n\r\n// types\r\ntype ProfileDataFormPropsType = {\r\n    initialValues: ProfileType\r\n    onSubmit: (formData: ProfileDataFormType) => void\r\n}\r\ntype ProfileDataFormValuesTypeKeys = GetStringKeys<ProfileDataFormType>\r\nexport type ProfileDataFormType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n}\r\ntype ProfileDataFormDomainType = ProfileDataFormPropsType &\r\n    InjectedFormProps<ProfileDataFormType, ProfileDataFormPropsType>\r\n","import { Component } from 'react'\r\n\r\nimport styles from 'features/profile/ui/profile-info/profile-info.module.scss'\r\nimport { ProfileType } from 'features/profile/api/profile.api.types'\r\nimport { ProfileData } from 'features/profile/ui/profile-info/profile-data'\r\nimport ProfileDataForm, {\r\n    ProfileDataFormType,\r\n} from 'features/profile/ui/profile-info/profile-data-form'\r\n\r\ntype Props = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    updateProfile: (profile: ProfileDataFormType) => Promise<any>\r\n}\r\n\r\ntype State = {\r\n    editMode: boolean\r\n}\r\n\r\nexport class ProfileInfo extends Component<Props, State> {\r\n    state = {\r\n        editMode: false,\r\n    }\r\n\r\n    onEditProfile = () => {\r\n        this.setState({\r\n            editMode: true,\r\n        })\r\n    }\r\n\r\n    onSubmit = (formData: ProfileDataFormType) => {\r\n        this.props.updateProfile(formData).then(() => {\r\n            this.setState({\r\n                editMode: false,\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { isOwner, profile } = this.props\r\n\r\n        return (\r\n            <div className={styles.profileInfo}>\r\n                <div className={styles.content}>\r\n                    {this.state.editMode ? (\r\n                        <ProfileDataForm onSubmit={this.onSubmit} initialValues={profile} />\r\n                    ) : (\r\n                        <ProfileData\r\n                            profile={profile}\r\n                            isOwner={isOwner}\r\n                            callback={this.onEditProfile}\r\n                        />\r\n                    )}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"profile\":\"profile_profile__AdWhf\",\"content\":\"profile_content__3Jqua\"};","// extracted by mini-css-extract-plugin\nexport default {\"friends\":\"friends_friends__2rZEo\",\"count\":\"friends_count__I3Cl5\",\"items\":\"friends_items__6VvMD\"};","// extracted by mini-css-extract-plugin\nexport default {\"link\":\"friend_link__1VAkW\",\"item\":\"friend_item__KrORr\",\"img\":\"friend_img__uYxbi\",\"userName\":\"friend_userName__btV6B\"};","import { NavLink } from 'react-router-dom'\r\n\r\nimport { UserType } from 'features/users/api/users.api.types'\r\nimport styles from './friend.module.scss'\r\nimport userDefault from 'common/img/user.jpg'\r\n\r\ntype Props = {\r\n    friend: UserType\r\n}\r\n\r\nexport const Friend = (props: Props) => {\r\n    const { friend } = props\r\n\r\n    return (\r\n        <NavLink to={`/profile/${friend.id}`} className={styles.link}>\r\n            <li>\r\n                <div className={styles.item}>\r\n                    <img\r\n                        className={styles.img}\r\n                        src={friend.photos.large || userDefault}\r\n                        alt=\"avatar-friend\"\r\n                    />\r\n                    <span className={styles.userName}>{friend.name}</span>\r\n                </div>\r\n            </li>\r\n        </NavLink>\r\n    )\r\n}\r\n","import { useState } from 'react'\r\n\r\nimport { UserType } from 'features/users/api/users.api.types'\r\nimport styles from './friends.module.scss'\r\nimport { Friend } from 'features/profile/ui/friends/friend'\r\nimport { Button } from 'common/components/button'\r\n\r\ntype Props = {\r\n    users: UserType[]\r\n    isOwner: boolean\r\n}\r\n\r\nexport const Friends = ({ users, isOwner }: Props) => {\r\n    const [showAllFriends, setShowAllFriends] = useState(false)\r\n\r\n    const onShowClickHandler = () => {\r\n        setShowAllFriends(!showAllFriends)\r\n    }\r\n\r\n    const displayedFriends = showAllFriends ? users : users.slice(0, 6)\r\n\r\n    return (\r\n        <div className={styles.friends}>\r\n            {\r\n                !isOwner\r\n                    ? <>\r\n                        <h3 className={styles.heading}>Friends</h3>\r\n                        <span className={styles.count}>Friends are hidden</span>\r\n                    </>\r\n                    : <>\r\n                        <h3 className={styles.heading}>My Friends</h3>\r\n                        <span className={styles.count}>{users.length} Friends</span>\r\n                        <ul className={styles.items}>\r\n                            {displayedFriends.map(friend => (\r\n                                <Friend key={friend.id} friend={friend} />\r\n                            ))}\r\n                        </ul>\r\n                        {!showAllFriends ? (\r\n                            <Button title=\"See all\" onClick={onShowClickHandler} />\r\n                        ) : (\r\n                            <Button title=\"Hide friends\" onClick={onShowClickHandler} />\r\n                        )}\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import { ProfilePropsType } from 'features/profile/ui/profile-container'\r\nimport { ProfileHeader } from 'features/profile/ui/profile-header'\r\nimport { ProfileInfo } from 'features/profile/ui/profile-info'\r\nimport styles from './profile.module.scss'\r\nimport { Friends } from 'features/profile/ui/friends'\r\nimport { Preloader } from 'common/components/preloader'\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    const {\r\n        profile,\r\n        status,\r\n        authorizedUserId,\r\n        users,\r\n        match,\r\n        updateUserStatus,\r\n        sendPhoto,\r\n        updateProfile,\r\n    } = props\r\n    const isOwner = !match.params.userId || Number(match.params.userId) === authorizedUserId\r\n\r\n    if (!Object.keys(profile).length) return <Preloader />\r\n\r\n    return (\r\n        <div className={styles.profile}>\r\n            <ProfileHeader\r\n                isOwner={isOwner}\r\n                profile={profile}\r\n                status={status}\r\n                updateUserStatus={updateUserStatus}\r\n                sendPhoto={sendPhoto}\r\n            />\r\n            <div className={styles.content}>\r\n                <ProfileInfo isOwner={isOwner} profile={profile} updateProfile={updateProfile} />\r\n                <Friends users={users} isOwner={isOwner}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { Component, ComponentType } from 'react'\r\nimport { compose } from 'redux'\r\nimport { connect } from 'react-redux'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\n\r\nimport { AppStateType } from 'app/model/store'\r\nimport {\r\n    getUserProfile,\r\n    getUserStatus,\r\n    sendPhoto,\r\n    updateProfile,\r\n    updateUserStatus,\r\n} from 'features/profile/model/profile.reducer'\r\nimport { getProfile, getStatus } from 'features/profile/model/profile.selectors'\r\nimport { getAuthUserId, getIsAuth } from 'features/login/model/auth.selectors'\r\nimport { Profile } from 'features/profile/ui/index'\r\nimport { ProfileDataFormType } from 'features/profile/ui/profile-info/profile-data-form'\r\nimport { ProfileType } from 'features/profile/api/profile.api.types'\r\nimport { FilterType, UserType } from 'features/users/api/users.api.types'\r\nimport { getUsers } from 'features/users/model/users.selectors'\r\nimport { requestUsers } from 'features/users/model/users.reducer'\r\n\r\nclass ProfileContainer extends Component<ProfilePropsType> {\r\n    refreshProfile() {\r\n        let { userId } = this.props.match.params\r\n\r\n        if (!userId) {\r\n            if (!this.props.authorizedUserId) {\r\n                this.props.history.push('/login')\r\n                return\r\n            }\r\n\r\n            userId = String(this.props.authorizedUserId)\r\n        }\r\n\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n        this.props.requestUsers(1, 10, { friend: true })\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ProfilePropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    profile: getProfile(state),\r\n    status: getStatus(state),\r\n    authorizedUserId: getAuthUserId(state),\r\n    isAuth: getIsAuth(state),\r\n    users: getUsers(state),\r\n})\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile,\r\n        getUserStatus,\r\n        updateUserStatus,\r\n        sendPhoto,\r\n        updateProfile,\r\n        requestUsers,\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n// types\r\ntype MapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    authorizedUserId: number | null\r\n    isAuth: boolean | null\r\n    users: UserType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (userId: string) => void\r\n    sendPhoto: (file: File) => void\r\n    updateProfile: (profile: ProfileDataFormType) => Promise<any>\r\n    requestUsers: (page: number, pageSize: number, filter: FilterType) => void\r\n}\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype ownProfileContainerPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nexport type ProfilePropsType = RouteComponentProps<PathParamsType> & ownProfileContainerPropsType\r\n","import { createSelector } from 'reselect'\r\n\r\nimport { AppStateType } from 'app/model/store'\r\nimport { FilterType, UserType } from 'features/users/api/users.api.types'\r\n\r\n// selectors\r\nconst getUsersSelector = (state: AppStateType) => state.users.users\r\nconst getPageSizeSelector = (state: AppStateType) => state.users.pageSize\r\nconst getTotalUsersCountSelector = (state: AppStateType) => state.users.totalUsersCount\r\nconst getCurrentPageSelector = (state: AppStateType) => state.users.currentPage\r\nconst getUsersFilterSelector = (state: AppStateType) => state.users.filter\r\nconst getIsFollowingInProgressSelector = (state: AppStateType) => state.users.isFollowingInProgress\r\nexport const getIsFetchingSelector = (state: AppStateType) => state.users.isFetching\r\n\r\n// selectors with reselect\r\nexport const getUsers = createSelector(getUsersSelector, (users: UserType[]) => users)\r\nexport const getPageSize = createSelector(getPageSizeSelector, (pageSize: number) => pageSize)\r\nexport const getUsersFilter = createSelector(getUsersFilterSelector, (filter: FilterType) => filter)\r\nexport const getTotalUsersCount = createSelector(\r\n    getTotalUsersCountSelector,\r\n    (totalUsersCount: number) => totalUsersCount,\r\n)\r\nexport const getCurrentPage = createSelector(\r\n    getCurrentPageSelector,\r\n    (currentPage: number) => currentPage,\r\n)\r\nexport const getIsFollowingInProgress = createSelector(\r\n    getIsFollowingInProgressSelector,\r\n    (isFollowingInProgress: number[]) => isFollowingInProgress,\r\n)\r\nexport const getIsFetching = createSelector(\r\n    getIsFetchingSelector,\r\n    (isFetching: boolean) => isFetching,\r\n)\r\n"],"names":["Button","title","callback","rest","className","styles","onClick","FormControl","input","meta","touched","error","children","props","hasError","cloneElement","CustomTextarea","CustomInput","createField","name","validators","component","Field","validate","getProfile","createSelector","state","profile","profileData","getStatus","photos","status","userId","Avatar","isOwner","src","large","userDefault","alt","type","accept","onChange","e","target","files","length","ProfileStatus","editMode","activateEditMode","editable","setState","deactivateEditMode","updateUserStatus","onChangeStatus","currentTarget","value","prevProps","this","onBlur","autoFocus","onDoubleClick","Component","ProfileHeader","onEditProfile","sendPhoto","style","backgroundImage","background","fullName","Contact","marginBottom","ProfileData","contacts","Object","entries","filter","map","lookingForAJob","lookingForAJobDescription","aboutMe","reduxForm","form","initialValues","handleSubmit","placeholder","onSubmit","rows","ProfileInfo","formData","updateProfile","then","Friend","friend","to","id","Friends","users","useState","showAllFriends","setShowAllFriends","onShowClickHandler","displayedFriends","slice","Profile","authorizedUserId","match","params","Number","keys","ProfileContainer","history","push","String","getUserProfile","getUserStatus","refreshProfile","requestUsers","compose","connect","getAuthUserId","isAuth","getIsAuth","getUsers","withRouter","getPageSize","pageSize","getUsersFilter","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFollowingInProgress","isFollowingInProgress","getIsFetching","isFetching"],"sourceRoot":""}