{"version":3,"file":"static/js/311.4857aa7c.chunk.js","mappings":"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","sources":["webpack://ar-network/./src/common/components/button/button.module.scss?f662","common/components/button/index.tsx","webpack://ar-network/./src/features/chat/ui/chat.module.scss?0011","webpack://ar-network/./src/features/chat/ui/messages/message/message.module.scss?9a59","features/chat/ui/messages/message/index.tsx","webpack://ar-network/./src/features/chat/ui/messages/messages.module.scss?3f79","features/chat/model/chat.selectors.ts","features/chat/ui/messages/index.tsx","webpack://ar-network/./src/features/chat/ui/add-message-form/add-message-form.module.scss?bffa","features/chat/ui/add-message-form/index.tsx","features/chat/ui/index.tsx","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_button__yx2c5\"};","import { ComponentPropsWithoutRef } from 'react'\r\nimport styles from 'common/components/button/button.module.scss'\r\n\r\ntype ButtonPropsType = ComponentPropsWithoutRef<'button'> & {\r\n    title: string\r\n    callback?: () => void\r\n}\r\n\r\nexport const Button = ({ title, callback, ...rest }: ButtonPropsType) => {\r\n    return (\r\n        <button className={styles.button} onClick={callback} {...rest}>\r\n            {title}\r\n        </button>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"chat\":\"chat_chat__flfzg\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"message_message__myEsC\",\"userInfo\":\"message_userInfo__Np1Hf\",\"photo\":\"message_photo__TDdeD\"};","import { memo } from 'react'\r\n\r\nimport styles from 'features/chat/ui/messages/message/message.module.scss'\r\nimport { DomainMessageType } from 'features/chat/api/chat.api'\r\nimport userDefault from 'common/img/user.jpg'\r\n\r\ntype Props = {\r\n    message: DomainMessageType\r\n}\r\n\r\nexport const Message = memo(({ message }: Props) => {\r\n    return (\r\n        <div className={styles.message}>\r\n            <div className={styles.userInfo}>\r\n                <img className={styles.photo} src={message.photo || userDefault} alt=\"avatar\" />\r\n                <b>{message.userName}</b>\r\n            </div>\r\n            <p>{message.message}</p>\r\n        </div>\r\n    )\r\n})\r\n","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"messages_messages__eyoMK\"};","import { createSelector } from 'reselect'\r\nimport { AppStateType } from 'app/model/store'\r\nimport { DomainMessageType, StatusType } from 'features/chat/api/chat.api'\r\n\r\n// selectors\r\nconst getMessagesSelector = (state: AppStateType) => state.chat.messages\r\nconst getStatusSelector = (state: AppStateType) => state.chat.status\r\n\r\n// selectors with reselect\r\nexport const getMessages = createSelector(\r\n    getMessagesSelector,\r\n    (messages: DomainMessageType[]) => messages,\r\n)\r\nexport const getStatus = createSelector(getStatusSelector, (status: StatusType) => status)\r\n","import { useEffect, useRef, useState, UIEvent } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nimport { Message } from 'features/chat/ui/messages/message'\r\nimport styles from 'features/chat/ui/messages/messages.module.scss'\r\nimport { getMessages } from 'features/chat/model/chat.selectors'\r\n\r\nexport const Messages = () => {\r\n    const messages = useSelector(getMessages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (!isAutoScroll) return\r\n        messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        // eslint-disable-next-line\r\n    }, [messages])\r\n\r\n    const onScrollHandler = (e: UIEvent<HTMLDivElement>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    const messagesItems = messages.map((message, idx) => (\r\n        <Message key={message.id} message={message} />\r\n    ))\r\n    return (\r\n        <div className={styles.messages} onScroll={onScrollHandler}>\r\n            {messagesItems}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"addMessageForm\":\"add-message-form_addMessageForm__KDiLk\",\"messageField\":\"add-message-form_messageField__2cHyC\"};","import { useState } from 'react'\r\n\r\nimport { Button } from 'common/components/button'\r\nimport styles from 'features/chat/ui/add-message-form/add-message-form.module.scss'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sendMessage } from 'features/chat/model/chat.reducer'\r\nimport { getStatus } from 'features/chat/model/chat.selectors'\r\n\r\nexport const AddMessageForm = () => {\r\n    const [message, setMessage] = useState('')\r\n    const status = useSelector(getStatus)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSendMessage = () => {\r\n        if (!message) return\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <form className={styles.addMessageForm}>\r\n            <textarea\r\n                className={styles.messageField}\r\n                onChange={e => setMessage(e.currentTarget.value)}\r\n                value={message}\r\n                rows={1}\r\n            ></textarea>\r\n            <Button\r\n                onClick={onSendMessage}\r\n                title=\"Send\"\r\n                type=\"submit\"\r\n                disabled={status !== 'ready'}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport styles from 'features/chat/ui/chat.module.scss'\r\nimport { Messages } from 'features/chat/ui/messages'\r\nimport { AddMessageForm } from 'features/chat/ui/add-message-form'\r\nimport { startMessagesListening, stopMessagesListening } from 'features/chat/model/chat.reducer'\r\nimport { getStatus } from 'features/chat/model/chat.selectors'\r\nimport { Preloader } from 'common/components/preloader'\r\nimport { getIsAuth } from 'features/login/model/auth.selectors'\r\n\r\nconst Chat = () => {\r\n    const status = useSelector(getStatus)\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!isAuth) return\r\n\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    if (status === 'pending') return <Preloader />\r\n\r\n    return (\r\n        <div className={styles.chat}>\r\n            {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n            <>\r\n                <Messages />\r\n                <AddMessageForm />\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}"],"names":["Button","title","callback","rest","className","styles","onClick","Message","memo","message","src","photo","userDefault","alt","userName","getMessages","createSelector","state","chat","messages","getStatus","status","Messages","useSelector","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","messagesItems","map","idx","id","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","ref","AddMessageForm","setMessage","dispatch","useDispatch","onChange","value","rows","sendMessage","type","disabled","isAuth","getIsAuth","startMessagesListening","stopMessagesListening","_objectWithoutProperties","source","excluded","key","i","target","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","prototype","propertyIsEnumerable","call"],"sourceRoot":""}