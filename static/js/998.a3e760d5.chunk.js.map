{"version":3,"file":"static/js/998.a3e760d5.chunk.js","mappings":"qLACA,EAAyB,uB,gCCOZA,EAAS,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,SAAaC,GAA4B,YACrE,OACI,mCAAQC,UAAWC,EAAeC,QAASJ,GAAcC,GAAzD,aACKF,O,kJCVb,EAA8B,kCAA9B,EAAwE,4B,uCCSlEM,EAAc,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,MAAiE,IAA1DC,KAAQC,EAAkD,EAAlDA,QAASC,EAAyC,EAAzCA,MAASC,EAAgC,EAAhCA,SAAaC,GAAmB,YAC9EC,EAAWJ,GAAWC,EAC5B,OACI,iBAAKP,UAAS,UAAKC,EAAL,YAA2BS,EAAWT,EAAe,IAAnE,WACKU,EAAAA,EAAAA,cAAaH,GAAD,QAAC,UAA0CJ,GAAUK,IACjEC,IAAY,0BAAOH,QAKnBK,EAAiB,SAACH,GAAD,OAC1B,SAACN,GAAD,kBAAiBM,GAAjB,cACI,4BAIKI,EAAc,SAACJ,GAAD,OACvB,SAACN,GAAD,kBAAiBM,GAAjB,cACI,yBAID,SAASK,EACZC,EACAC,EACAC,GAED,IADCR,EACF,uDADU,GAER,OAAO,SAACS,EAAA,GAAD,QAAOH,KAAMA,EAAMI,SAAUH,EAAYC,UAAWA,GAAeR,M,wFCrC9E,EAAwB,qBAAxB,EAAuD,uBAAvD,EAAqF,oBAArF,EAAgH,oB,mBCAhH,EAA4B,8BAA5B,EAAkE,0BAAlE,EAAuG,6BAAvG,EAA4I,0BCD/HW,EAAoC,SAACC,GAC9C,OAAOA,OAAQC,EAAY,qB,mBCwC/B,GAAeC,EAAAA,EAAAA,GAA4C,CACvDC,KAAM,SADV,EAjCkB,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,aAAclB,EAA6C,EAA7CA,MAAOmB,EAAsC,EAAtCA,WACtC,OACI,kBAAM1B,UAAWC,EAAkB0B,SAAUF,EAA7C,UACKlB,IAAS,gBAAKP,UAAWC,EAAhB,SAA+BM,KACxCO,EAAAA,EAAAA,IAAqC,QAAS,CAACM,GAAgBP,EAAAA,GAAa,CACzEe,KAAM,QACNC,YAAa,mBACb7B,UAAWC,KAEda,EAAAA,EAAAA,IAAqC,WAAY,CAACM,GAAgBP,EAAAA,GAAa,CAC5Ee,KAAM,WACNC,YAAa,sBACb7B,UAAWC,KAEf,iBAAKD,UAAWC,EAAhB,WACKa,EAAAA,EAAAA,IAAqC,aAAc,GAAID,EAAAA,GAAa,CACjEe,KAAM,WACNC,YAAa,WACb7B,UAAWC,EACX6B,GAAI,gBAER,kBAAOC,QAAQ,aAAf,4BAEHL,IAAc,gBAAKM,IAAKN,EAAYO,IAAI,YACxCP,IACGZ,EAAAA,EAAAA,IAAqC,UAAW,CAACM,GAAgBP,EAAAA,GAAa,CAC1EgB,YAAa,mBAErB,SAAC,IAAD,CAAQD,KAAK,SAAS/B,MAAM,gB,oBCQxC,EApCc,WACV,IAAMqC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBV,GAAaS,EAAAA,EAAAA,IAAYE,EAAAA,IAEzBC,GAAWC,EAAAA,EAAAA,MAMjB,OAAIL,GAAe,SAAC,KAAD,CAAUM,GAAG,aAG5B,iBAAKxC,UAAWC,EAAhB,WACI,eAAID,UAAWC,EAAf,oBACA,iBAAKD,UAAWC,EAAhB,WACI,qDAEI,cACID,UAAWC,EACXwC,KAAK,wCACLC,OAAO,SACPC,IAAI,aAJR,sBASJ,wDACA,sDACA,8CAEJ,SAAC,EAAD,CAAWhB,SAzBF,SAACiB,GACdN,GAASO,EAAAA,EAAAA,IAAMD,KAwBoBlB,WAAYA","sources":["webpack://reackman-s-network/./src/common/components/button/button.module.scss?f662","common/components/button/index.tsx","webpack://reackman-s-network/./src/common/components/form-control/form-control.module.scss?ad75","common/components/form-control/index.tsx","webpack://reackman-s-network/./src/features/login/ui/login.module.scss?1f4b","webpack://reackman-s-network/./src/features/login/ui/login-form/login-form.module.scss?bdc3","common/utils/validators/validators.ts","features/login/ui/login-form/index.tsx","features/login/ui/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"button_button__yx2c5\"};","import { ComponentPropsWithoutRef } from 'react'\r\nimport styles from 'common/components/button/button.module.scss'\r\n\r\ntype ButtonPropsType = ComponentPropsWithoutRef<'button'> & {\r\n    title: string\r\n    callback?: () => void\r\n}\r\n\r\nexport const Button = ({ title, callback, ...rest }: ButtonPropsType) => {\r\n    return (\r\n        <button className={styles.button} onClick={callback} {...rest}>\r\n            {title}\r\n        </button>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"form-control_formControl__8nMZC\",\"error\":\"form-control_error__TdxE3\"};","import { cloneElement, FC, ReactElement, ReactNode } from 'react'\r\nimport { Field, WrappedFieldProps } from 'redux-form'\r\n\r\nimport styles from 'common/components/form-control/form-control.module.scss'\r\nimport { FieldValidatorType } from 'common/utils/validators/validators'\r\n\r\ntype Props = WrappedFieldProps & {\r\n    children: ReactNode\r\n}\r\n\r\nconst FormControl = ({ input, meta: { touched, error }, children, ...props }: Props) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n            {cloneElement(children as ReactElement<ReactNode>, { ...input, ...props })}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const CustomTextarea = (props: Props) => (\r\n    <FormControl {...props}>\r\n        <textarea />\r\n    </FormControl>\r\n)\r\n\r\nexport const CustomInput = (props: Props) => (\r\n    <FormControl {...props}>\r\n        <input />\r\n    </FormControl>\r\n)\r\n\r\nexport function createField<FormKeyType extends string>(\r\n    name: FormKeyType,\r\n    validators: FieldValidatorType[],\r\n    component: FC<Props>,\r\n    props = {},\r\n) {\r\n    return <Field name={name} validate={validators} component={component} {...props} />\r\n}\r\n\r\n// types\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","// extracted by mini-css-extract-plugin\nexport default {\"login\":\"login_login__klQg8\",\"heading\":\"login_heading__L9Qpj\",\"info\":\"login_info__5bCIG\",\"link\":\"login_link__8WR4l\"};","// extracted by mini-css-extract-plugin\nexport default {\"loginForm\":\"login-form_loginForm__S9pQH\",\"input\":\"login-form_input__JEHEI\",\"checkbox\":\"login-form_checkbox__7SEDi\",\"error\":\"login-form_error__CQnPf\"};","export const requiredField: FieldValidatorType = (value: string) => {\r\n    return value ? undefined : 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator =\r\n    (maxLength: number): FieldValidatorType =>\r\n    (value: string) => {\r\n        return value.length <= maxLength\r\n            ? undefined\r\n            : `The maximum length must not exceed ${maxLength} characters`\r\n    }\r\n\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n","import { InjectedFormProps, reduxForm } from 'redux-form'\r\n\r\nimport { createField, CustomInput, GetStringKeys } from 'common/components/form-control'\r\nimport styles from 'features/login/ui/login-form/login-form.module.scss'\r\nimport { requiredField } from 'common/utils/validators/validators'\r\nimport { LoginType } from 'features/login/api/auth.api.types'\r\nimport { Button } from 'common/components/button'\r\n\r\nconst LoginForm = ({ handleSubmit, error, captchaUrl }: LoginFormDomainType) => {\r\n    return (\r\n        <form className={styles.loginForm} onSubmit={handleSubmit}>\r\n            {error && <div className={styles.error}>{error}</div>}\r\n            {createField<LoginFormValuesTypeKeys>('email', [requiredField], CustomInput, {\r\n                type: 'email',\r\n                placeholder: 'Enter your email',\r\n                className: styles.input,\r\n            })}\r\n            {createField<LoginFormValuesTypeKeys>('password', [requiredField], CustomInput, {\r\n                type: 'password',\r\n                placeholder: 'Enter your password',\r\n                className: styles.input,\r\n            })}\r\n            <div className={styles.checkbox}>\r\n                {createField<LoginFormValuesTypeKeys>('rememberMe', [], CustomInput, {\r\n                    type: 'checkbox',\r\n                    placeholder: 'checkbox',\r\n                    className: styles.checkbox,\r\n                    id: 'rememberMe',\r\n                })}\r\n                <label htmlFor=\"rememberMe\">remember me</label>\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl} alt=\"captcha\" />}\r\n            {captchaUrl &&\r\n                createField<LoginFormValuesTypeKeys>('captcha', [requiredField], CustomInput, {\r\n                    placeholder: 'Enter captcha',\r\n                })}\r\n            <Button type=\"submit\" title=\"Login\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<FormDataType, LoginFormPropsType>({\r\n    form: 'login',\r\n})(LoginForm)\r\n\r\n// types\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null\r\n}\r\nexport type FormDataType = Required<LoginType>\r\ntype LoginFormValuesTypeKeys = GetStringKeys<FormDataType>\r\ntype LoginFormDomainType = LoginFormPropsType & InjectedFormProps<FormDataType, LoginFormPropsType>\r\n","import { useDispatch, useSelector } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport styles from 'features/login/ui/login.module.scss'\r\nimport LoginForm, { FormDataType } from 'features/login/ui/login-form'\r\nimport { login } from 'features/login/model/auth.reducer'\r\nimport { getCaptchaUrl, getIsAuth } from 'features/login/model/auth.selectors'\r\n\r\nconst Login = () => {\r\n    const isAuth = useSelector(getIsAuth)\r\n    const captchaUrl = useSelector(getCaptchaUrl)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(login(formData))\r\n    }\r\n\r\n    if (isAuth) return <Redirect to=\"profile\" />\r\n\r\n    return (\r\n        <div className={styles.login}>\r\n            <h1 className={styles.heading}>Login</h1>\r\n            <div className={styles.info}>\r\n                <p>\r\n                    To log in get registered\r\n                    <a\r\n                        className={styles.link}\r\n                        href=\"https://social-network.samuraijs.com/\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        here\r\n                    </a>\r\n                </p>\r\n                <p>or use common test account:</p>\r\n                <p>Email: free@samuraijs.com</p>\r\n                <p>Password: free</p>\r\n            </div>\r\n            <LoginForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n"],"names":["Button","title","callback","rest","className","styles","onClick","FormControl","input","meta","touched","error","children","props","hasError","cloneElement","CustomTextarea","CustomInput","createField","name","validators","component","Field","validate","requiredField","value","undefined","reduxForm","form","handleSubmit","captchaUrl","onSubmit","type","placeholder","id","htmlFor","src","alt","isAuth","useSelector","getIsAuth","getCaptchaUrl","dispatch","useDispatch","to","href","target","rel","formData","login"],"sourceRoot":""}